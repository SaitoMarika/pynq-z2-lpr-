
# coding: utf-8

# In[3]:


from pynq.overlays.base import BaseOverlay
from pynq.lib import MicroblazeLibrary

base = BaseOverlay('base.bit')
lib = MicroblazeLibrary(base.PMODA, ['gpio','pmod_grove'])


# In[2]:


oled_asc2_1206=( (0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00), (0x00,0x00,0x00,0x00,0x3F,0x40,0x00,0x00,0x00,0x00,0x00,0x00), (0x00,0x00,0x30,0x00,0x40,0x00,0x30,0x00,0x40,0x00,0x00,0x00), (0x09,0x00,0x0B,0xC0,0x3D,0x00,0x0B,0xC0,0x3D,0x00,0x09,0x00), (0x18,0xC0,0x24,0x40,0x7F,0xE0,0x22,0x40,0x31,0x80,0x00,0x00), (0x18,0x00,0x24,0xC0,0x1B,0x00,0x0D,0x80,0x32,0x40,0x01,0x80), (0x03,0x80,0x1C,0x40,0x27,0x40,0x1C,0x80,0x07,0x40,0x00,0x40), (0x10,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00), (0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x20,0x40,0x40,0x20), (0x00,0x00,0x40,0x20,0x20,0x40,0x1F,0x80,0x00,0x00,0x00,0x00), (0x09,0x00,0x06,0x00,0x1F,0x80,0x06,0x00,0x09,0x00,0x00,0x00), (0x04,0x00,0x04,0x00,0x3F,0x80,0x04,0x00,0x04,0x00,0x00,0x00), (0x00,0x10,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00), (0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x00,0x00), (0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00), (0x00,0x20,0x01,0xC0,0x06,0x00,0x38,0x00,0x40,0x00,0x00,0x00), (0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00), (0x00,0x00,0x10,0x40,0x3F,0xC0,0x00,0x40,0x00,0x00,0x00,0x00), (0x18,0xC0,0x21,0x40,0x22,0x40,0x24,0x40,0x18,0x40,0x00,0x00), (0x10,0x80,0x20,0x40,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00), (0x02,0x00,0x0D,0x00,0x11,0x00,0x3F,0xC0,0x01,0x40,0x00,0x00), (0x3C,0x80,0x24,0x40,0x24,0x40,0x24,0x40,0x23,0x80,0x00,0x00), (0x1F,0x80,0x24,0x40,0x24,0x40,0x34,0x40,0x03,0x80,0x00,0x00), (0x30,0x00,0x20,0x00,0x27,0xC0,0x38,0x00,0x20,0x00,0x00,0x00), (0x1B,0x80,0x24,0x40,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00), (0x1C,0x00,0x22,0xC0,0x22,0x40,0x22,0x40,0x1F,0x80,0x00,0x00), (0x00,0x00,0x00,0x00,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x00), (0x00,0x00,0x00,0x00,0x04,0x60,0x00,0x00,0x00,0x00,0x00,0x00), (0x00,0x00,0x04,0x00,0x0A,0x00,0x11,0x00,0x20,0x80,0x40,0x40), (0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x00,0x00), (0x00,0x00,0x40,0x40,0x20,0x80,0x11,0x00,0x0A,0x00,0x04,0x00), (0x18,0x00,0x20,0x00,0x23,0x40,0x24,0x00,0x18,0x00,0x00,0x00), (0x1F,0x80,0x20,0x40,0x27,0x40,0x29,0x40,0x1F,0x40,0x00,0x00), (0x00,0x40,0x07,0xC0,0x39,0x00,0x0F,0x00,0x01,0xC0,0x00,0x40), (0x20,0x40,0x3F,0xC0,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00), (0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x30,0x80,0x00,0x00), (0x20,0x40,0x3F,0xC0,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00), (0x20,0x40,0x3F,0xC0,0x24,0x40,0x2E,0x40,0x30,0xC0,0x00,0x00), (0x20,0x40,0x3F,0xC0,0x24,0x40,0x2E,0x00,0x30,0x00,0x00,0x00), (0x0F,0x00,0x10,0x80,0x20,0x40,0x22,0x40,0x33,0x80,0x02,0x00), (0x20,0x40,0x3F,0xC0,0x04,0x00,0x04,0x00,0x3F,0xC0,0x20,0x40), (0x20,0x40,0x20,0x40,0x3F,0xC0,0x20,0x40,0x20,0x40,0x00,0x00), (0x00,0x60,0x20,0x20,0x20,0x20,0x3F,0xC0,0x20,0x00,0x20,0x00), (0x20,0x40,0x3F,0xC0,0x24,0x40,0x0B,0x00,0x30,0xC0,0x20,0x40), (0x20,0x40,0x3F,0xC0,0x20,0x40,0x00,0x40,0x00,0x40,0x00,0xC0), (0x3F,0xC0,0x3C,0x00,0x03,0xC0,0x3C,0x00,0x3F,0xC0,0x00,0x00), (0x20,0x40,0x3F,0xC0,0x0C,0x40,0x23,0x00,0x3F,0xC0,0x20,0x00), (0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00), (0x20,0x40,0x3F,0xC0,0x24,0x40,0x24,0x00,0x18,0x00,0x00,0x00), (0x1F,0x80,0x21,0x40,0x21,0x40,0x20,0xE0,0x1F,0xA0,0x00,0x00), (0x20,0x40,0x3F,0xC0,0x24,0x40,0x26,0x00,0x19,0xC0,0x00,0x40), (0x18,0xC0,0x24,0x40,0x24,0x40,0x22,0x40,0x31,0x80,0x00,0x00), (0x30,0x00,0x20,0x40,0x3F,0xC0,0x20,0x40,0x30,0x00,0x00,0x00), (0x20,0x00,0x3F,0x80,0x00,0x40,0x00,0x40,0x3F,0x80,0x20,0x00), (0x20,0x00,0x3E,0x00,0x01,0xC0,0x07,0x00,0x38,0x00,0x20,0x00), (0x38,0x00,0x07,0xC0,0x3C,0x00,0x07,0xC0,0x38,0x00,0x00,0x00), (0x20,0x40,0x39,0xC0,0x06,0x00,0x39,0xC0,0x20,0x40,0x00,0x00), (0x20,0x00,0x38,0x40,0x07,0xC0,0x38,0x40,0x20,0x00,0x00,0x00), (0x30,0x40,0x21,0xC0,0x26,0x40,0x38,0x40,0x20,0xC0,0x00,0x00), (0x00,0x00,0x00,0x00,0x7F,0xE0,0x40,0x20,0x40,0x20,0x00,0x00), (0x00,0x00,0x70,0x00,0x0C,0x00,0x03,0x80,0x00,0x40,0x00,0x00), (0x00,0x00,0x40,0x20,0x40,0x20,0x7F,0xE0,0x00,0x00,0x00,0x00), (0x00,0x00,0x20,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00), (0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10), (0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00), (0x00,0x00,0x02,0x80,0x05,0x40,0x05,0x40,0x03,0xC0,0x00,0x40), (0x20,0x00,0x3F,0xC0,0x04,0x40,0x04,0x40,0x03,0x80,0x00,0x00), (0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x40,0x06,0x40,0x00,0x00), (0x00,0x00,0x03,0x80,0x04,0x40,0x24,0x40,0x3F,0xC0,0x00,0x40), (0x00,0x00,0x03,0x80,0x05,0x40,0x05,0x40,0x03,0x40,0x00,0x00), (0x00,0x00,0x04,0x40,0x1F,0xC0,0x24,0x40,0x24,0x40,0x20,0x00), (0x00,0x00,0x02,0xE0,0x05,0x50,0x05,0x50,0x06,0x50,0x04,0x20), (0x20,0x40,0x3F,0xC0,0x04,0x40,0x04,0x00,0x03,0xC0,0x00,0x40), (0x00,0x00,0x04,0x40,0x27,0xC0,0x00,0x40,0x00,0x00,0x00,0x00), (0x00,0x10,0x00,0x10,0x04,0x10,0x27,0xE0,0x00,0x00,0x00,0x00), (0x20,0x40,0x3F,0xC0,0x01,0x40,0x07,0x00,0x04,0xC0,0x04,0x40), (0x20,0x40,0x20,0x40,0x3F,0xC0,0x00,0x40,0x00,0x40,0x00,0x00), (0x07,0xC0,0x04,0x00,0x07,0xC0,0x04,0x00,0x03,0xC0,0x00,0x00), (0x04,0x40,0x07,0xC0,0x04,0x40,0x04,0x00,0x03,0xC0,0x00,0x40), (0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x40,0x03,0x80,0x00,0x00), (0x04,0x10,0x07,0xF0,0x04,0x50,0x04,0x40,0x03,0x80,0x00,0x00), (0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x50,0x07,0xF0,0x00,0x10), (0x04,0x40,0x07,0xC0,0x02,0x40,0x04,0x00,0x04,0x00,0x00,0x00), (0x00,0x00,0x06,0x40,0x05,0x40,0x05,0x40,0x04,0xC0,0x00,0x00), (0x00,0x00,0x04,0x00,0x1F,0x80,0x04,0x40,0x00,0x40,0x00,0x00), (0x04,0x00,0x07,0x80,0x00,0x40,0x04,0x40,0x07,0xC0,0x00,0x40), (0x04,0x00,0x07,0x00,0x04,0xC0,0x01,0x80,0x06,0x00,0x04,0x00), (0x06,0x00,0x01,0xC0,0x07,0x00,0x01,0xC0,0x06,0x00,0x00,0x00), (0x04,0x40,0x06,0xC0,0x01,0x00,0x06,0xC0,0x04,0x40,0x00,0x00), (0x04,0x10,0x07,0x10,0x04,0xE0,0x01,0x80,0x06,0x00,0x04,0x00), (0x00,0x00,0x04,0x40,0x05,0xC0,0x06,0x40,0x04,0x40,0x00,0x00), (0x00,0x00,0x00,0x00,0x04,0x00,0x7B,0xE0,0x40,0x20,0x00,0x00), (0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0,0x00,0x00,0x00,0x00), (0x00,0x00,0x40,0x20,0x7B,0xE0,0x04,0x00,0x00,0x00,0x00,0x00), (0x40,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x40,0x00), )


# In[4]:


gpio_rs = lib.gpio_open(lib.PMOD_G1_B)
gpio_rst = lib.gpio_open(lib.PMOD_G1_A)
gpio_clk = lib.gpio_open(lib.PMOD_G4_B)
gpio_din = lib.gpio_open(lib.PMOD_G3_B)
#GPIO_OUT=0
gpio_rs.set_direction(lib.GPIO_OUT)
gpio_rst.set_direction(lib.GPIO_OUT)
gpio_clk.set_direction(lib.GPIO_OUT)
gpio_din.set_direction(lib.GPIO_OUT)


# In[6]:


gpio_rst.write(0)



# In[4]:


OLED_GRAM = [ [0 for col in range(8)] for row in range(128)]
OLED_CMD=0
OLED_DATA=1
MAX_CHAR_POSX=126
MAX_CHAR_POSY=58 

#向SSD1306写入一个字节。
#dat:要写入的数据/命令
#cmd:数据/命令标志 0,表示命令;1,表示数据;
def OLED_WR_Byte(write_data,cmd):
    if cmd:
        gpio_rs.write(cmd)
    else:
        gpio_rs.write(cmd)
    for i in range(0,8):
        gpio_clk.write(0)
        for i in range(0,2):
            i=i
        if (write_data&0x80):
            gpio_din.write(1)
        else: 
            gpio_din.write(0)
        gpio_clk.write(1)
        write_data<<=1  
    gpio_rs.write(1)

#更新显存到LCD    
def OLED_Refresh_Gram():
    global OLED_CMD
    global OLED_DATA
    global OLED_GRAM
    for i in range(0,8):  
        OLED_WR_Byte (0xb0+i,OLED_CMD);    #设置页地址（0~7）
        OLED_WR_Byte (0x00,OLED_CMD);      #设置显示位置—列低地址
        OLED_WR_Byte (0x10,OLED_CMD);      #设置显示位置—列高地址   
        for n in range(0,128):
            OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 

#开启OLED显示    
def OLED_Display_On():
    global OLED_CMD
    OLED_WR_Byte(0X8D,OLED_CMD);  #SET DCDC命令
    OLED_WR_Byte(0X14,OLED_CMD);  #DCDC ON
    OLED_WR_Byte(0XAF,OLED_CMD);  #DISPLAY ON
    
#关闭OLED显示     
def OLED_Display_Off(void): 
    global OLED_CMD
    OLED_WR_Byte(0X8D,OLED_CMD);  #SET DCDC命令
    OLED_WR_Byte(0X10,OLED_CMD);  #DCDC OFF
    OLED_WR_Byte(0XAE,OLED_CMD);  #DISPLAY OFF

#清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
def OLED_Clear(): 
    global OLED_GRAM
    for i in range(0,8):
        for n in range(0,128):
            OLED_GRAM[n][i]=0X00;
    OLED_Refresh_Gram();   #更新

#画点 
#x:0~127
#y:0~63
#t:1 填充 0,清空  
def OLED_DrawPoint(x,y,t):
    temp=0
    global OLED_GRAM
    if x>131 or y>63:
        return                   #超出范围了.

    pos=7-int(y/8)
    bx=y%8
    temp=1<<(7-bx)
    
    if t:
        OLED_GRAM[x][pos]|=temp
    else:
        OLED_GRAM[x][pos]&=~temp    

#在指定位置显示一个字符,包括部分字符
#x:0~127
#y:0~63
#mode:0,反白显示;1,正常显示				 
#size:选择字体 16/12 
def OLED_ShowChar(x, y,ch,size,mode):
    temp=0
    t=0
    t1=0
    y0=y
    ch=ch-' '     #得到偏移后的值   
    for t in range(0,size):  
        if (size==12):
            temp=oled_asc2_1206[ch][t]  #调用1206字体                          
        for t1 in range(0,8):
            if (temp&0x80):
                OLED_DrawPoint(x,y,mode)
            else:
                OLED_DrawPoint(x,y,not mode)
        temp<<=1
        y = y+1
        if ((y-y0)==size):
            y = y0
            x = x+1
        break
        
#显示字符串
#x,y:起点坐标  
#*p:字符串起始地址
#用16字体
def OLED_ShowString(x,y,p):
    global MAX_CHAR_POSX
    global MAX_CHAR_POSY      
    for ch_temp in p:         
        if (x>MAX_CHAR_POSX):
            x=0
            y+=16
        if (y>MAX_CHAR_POSY):
            y=x=0
            OLED_Clear()
        OLED_ShowChar(x,y,ch_temp,16,1) 
        x+=8
        p=p+1 
        
def OLED_Init():
    global OLED_CMD
    global OLED_DATA
    gpio_rst.write(0)
    for i in range(0,1000):
        i=i
    gpio_rst.write(1)
    
    OLED_WR_Byte(0xAE,OLED_CMD)  #关闭显示AE
    OLED_WR_Byte(0xD5,OLED_CMD)  #设置时钟分频因子,震荡频率
    OLED_WR_Byte(0x80,OLED_CMD)  #[3:0],分频因子;[7:4],震荡频率
    OLED_WR_Byte(0xA8,OLED_CMD)  #设置驱动路数
    OLED_WR_Byte(0X3F,OLED_CMD)  #默认0X3F(1/64) 
    OLED_WR_Byte(0xD3,OLED_CMD)  #设置显示偏移
    OLED_WR_Byte(0X00,OLED_CMD)  #默认为0
    OLED_WR_Byte(0x40,OLED_CMD)  #设置显示开始行 [5:0],行数.
                                   
    OLED_WR_Byte(0x8D,OLED_CMD)  #电荷泵设置
    OLED_WR_Byte(0x14,OLED_CMD)  #bit2，开启/关闭
    OLED_WR_Byte(0x20,OLED_CMD)  #设置内存地址模式
    OLED_WR_Byte(0x02,OLED_CMD)  #[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
    OLED_WR_Byte(0xA1,OLED_CMD)  #段重定义设置,bit0:0,0->0;1,0->127;
    OLED_WR_Byte(0xC0,OLED_CMD)  #设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
    OLED_WR_Byte(0xDA,OLED_CMD)  #设置COM硬件引脚配置
    OLED_WR_Byte(0x12,OLED_CMD)  #[5:4]配置
         
    OLED_WR_Byte(0x81,OLED_CMD)  #对比度设置
    OLED_WR_Byte(0xEF,OLED_CMD)  #1~255;默认0X7F (亮度设置,越大越亮)
    OLED_WR_Byte(0xD9,OLED_CMD)  #设置预充电周期
    OLED_WR_Byte(0xf1,OLED_CMD)  #[3:0],PHASE 1;[7:4],PHASE 2;
    OLED_WR_Byte(0xDB,OLED_CMD)  #设置VCOMH 电压倍率
    OLED_WR_Byte(0x30,OLED_CMD)  #[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;

    OLED_WR_Byte(0xA4,OLED_CMD)  #全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
    OLED_WR_Byte(0xA6,OLED_CMD)  #设置显示方式;bit0:1,反相显示;0,正常显示 
    OLED_WR_Byte(0xAF,OLED_CMD)  #开启显示 
    OLED_Clear()


# In[11]:


OLED_Init()


# In[97]:


OLED_ShowChar(0,0,'6',12,1)


# In[12]:


OLED_DrawPoint(0,0,1)
OLED_DrawPoint(0,1,1)
OLED_DrawPoint(0,2,1)
OLED_DrawPoint(0,3,1)
OLED_DrawPoint(0,4,1)
OLED_DrawPoint(0,5,1)
OLED_DrawPoint(0,6,1)
OLED_DrawPoint(0,7,1)

